import { useState, useEffect } from 'react'
import AgentVerification from '../components/AgentVerification';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { useAuth } from '../useAuth.jsx';
import { 
  Users, 
  Search, 
  Calendar,
  CheckCircle,
  XCircle,
  Clock,
  AlertCircle,
  Mail,
  Phone,
  Shield
} from 'lucide-react'

export default function AgentManagement() {
  const [agents, setAgents] = useState([])
  const [availableAgents, setAvailableAgents] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0])
  const [activeTab, setActiveTab] = useState('agents') // 'agents' or 'verification'
  const [selectedCardFilter, setSelectedCardFilter] = useState(null)
  const { apiCall } = useAuth()

  useEffect(() => {
    fetchAgents()
    fetchAvailableAgents()
  }, [selectedDate])

  const fetchAgents = async () => {
    try {
      setLoading(true)
      const data = await apiCall('/users?role=agent')
      setAgents(data.users || [])
    } catch (error) {
      setError('Failed to load agents')
      console.error('Agents error:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchAvailableAgents = async () => {
    try {
      const data = await apiCall(`/agents/available?date=${selectedDate}`)
      setAvailableAgents(data.available_agents || [])
    } catch (error) {
      console.error('Available agents error:', error)
    }
  }

  const handleCardClick = (filterType) => {
    // Toggle the filter - if same card is clicked, clear the filter
    if (selectedCardFilter === filterType) {
      setSelectedCardFilter(null)
    } else {
      setSelectedCardFilter(filterType)
    }
  }

  const filteredAgents = agents.filter(agent => {
    // First apply search filter
    const fullName = `${agent.first_name} ${agent.last_name}`.toLowerCase()
    const email = agent.email.toLowerCase()
    const search = searchTerm.toLowerCase()
    const matchesSearch = fullName.includes(search) || email.includes(search)
    
    // Then apply card filter if one is selected
    if (!selectedCardFilter) {
      return matchesSearch // No card filter, just return search results
    }
    
    const status = getAvailabilityStatus(agent.id)
    
    switch (selectedCardFilter) {
      case 'total':
        return matchesSearch // Show all agents
      case 'available':
        return matchesSearch && status === 'available'
      case 'unavailable':
        return matchesSearch && status !== 'available'
      default:
        return matchesSearch
    }
  })

  const getAvailabilityStatus = (agentId) => {
    const available = availableAgents.find(a => a.id === agentId)
    return available ? 'available' : 'unavailable'
  }

  const getStatusBadge = (status) => {
    if (status === 'available') {
      return <Badge variant="default" className="bg-green-500">Available</Badge>
    } else {
      return <Badge variant="secondary">Unavailable</Badge>
    }
  }

  if (loading) {
    return (
      <div className="space-y-8 animate-pulse">
        <div className="h-10 w-48 bg-v3-bg-card rounded-md"></div>
        <div className="grid gap-6 lg:grid-cols-4">
          <div className="h-32 bg-v3-bg-card rounded-lg"></div>
          <div className="h-32 bg-v3-bg-card rounded-lg"></div>
          <div className="h-32 bg-v3-bg-card rounded-lg"></div>
          <div className="h-32 bg-v3-bg-card rounded-lg"></div>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="dashboard-card text-center p-8">
        <AlertCircle className="mx-auto h-16 w-16 text-v3-orange mb-4" />
        <h2 className="text-xl font-bold mb-2">Error Loading Agents</h2>
        <p className="text-v3-text-muted mb-6">{error}</p>
        <Button onClick={fetchAgents} className="button-refresh">
          Try Again
        </Button>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Agent Management</h1>
        <p className="text-muted-foreground">Manage agents and verify their documents</p>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => setActiveTab('agents')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'agents'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            <Users className="h-4 w-4" />
            All Agents
          </button>
          <button
            onClick={() => setActiveTab('verification')}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'verification'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            <Shield className="h-4 w-4" />
            Verification Queue
          </button>
        </nav>
      </div>

      {/* Tab Content */}
      {activeTab === 'agents' ? (
        <>
          {/* Summary Cards */}
          <div className="grid gap-4 md:grid-cols-4">
            {/* Total Agents Card */}
            <Card 
              className={`cursor-pointer transition-all hover:scale-105 ${
                selectedCardFilter === 'total' ? 'ring-2 ring-orange-500 bg-orange-50' : 'hover:shadow-lg'
              }`}
              onClick={() => handleCardClick('total')}
            >
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Agents</CardTitle>
                <Users className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{agents.length}</div>
                <p className="text-xs text-muted-foreground">
                  Registered field agents
                </p>
                {selectedCardFilter === 'total' && (
                  <p className="text-xs text-orange-600 mt-1 font-medium">
                    ← Click to clear filter
                  </p>
                )}
              </CardContent>
            </Card>

            {/* Available Today Card */}
            <Card 
              className={`cursor-pointer transition-all hover:scale-105 ${
                selectedCardFilter === 'available' ? 'ring-2 ring-green-500 bg-green-50' : 'hover:shadow-lg'
              }`}
              onClick={() => handleCardClick('available')}
            >
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Available Today</CardTitle>
                <CheckCircle className="h-4 w-4 text-green-500" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{availableAgents.length}</div>
                <p className="text-xs text-muted-foreground">
                  Ready for deployment
                </p>
                {selectedCardFilter === 'available' && (
                  <p className="text-xs text-green-600 mt-1 font-medium">
                    ← Click to clear filter
                  </p>
                )}
              </CardContent>
            </Card>

            {/* Unavailable Card */}
            <Card 
              className={`cursor-pointer transition-all hover:scale-105 ${
                selectedCardFilter === 'unavailable' ? 'ring-2 ring-red-500 bg-red-50' : 'hover:shadow-lg'
              }`}
              onClick={() => handleCardClick('unavailable')}
            >
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Unavailable</CardTitle>
                <XCircle className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{agents.length - availableAgents.length}</div>
                <p className="text-xs text-muted-foreground">
                  Not available today
                </p>
                {selectedCardFilter === 'unavailable' && (
                  <p className="text-xs text-red-600 mt-1 font-medium">
                    ← Click to clear filter
                  </p>
                )}
              </CardContent>
            </Card>

            {/* Response Rate Card (keep as non-clickable) */}
            <Card>
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Response Rate</CardTitle>
                <Clock className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">85%</div>
                <p className="text-xs text-muted-foreground">
                  Average this month
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Filter Status Display */}
          {selectedCardFilter && (
            <div className="flex items-center gap-2 p-3 bg-orange-100 rounded-lg">
              <AlertCircle className="h-4 w-4 text-orange-600" />
              <span className="text-sm text-orange-800">
                Showing {selectedCardFilter === 'total' ? 'all agents' : 
                         selectedCardFilter === 'available' ? 'available agents only' : 
                         'unavailable agents only'}
              </span>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setSelectedCardFilter(null)}
                className="ml-auto"
              >
                Clear Filter
              </Button>
            </div>
          )}

          {/* Filters */}
          <div className="flex gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search agents by name or email..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Calendar className="h-4 w-4 text-muted-foreground" />
              <Input
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                className="w-40"
              />
            </div>
          </div>

          {/* Agents Grid */}
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {filteredAgents.length === 0 ? (
              <div className="col-span-full">
                <Card>
                  <CardContent className="pt-6">
                    <div className="text-center">
                      <Users className="mx-auto h-12 w-12 text-muted-foreground mb-4" />
                      <h3 className="text-lg font-semibold mb-2">No agents found</h3>
                      <p className="text-muted-foreground">
                        {searchTerm ? 'Try adjusting your search terms' : 'No agents registered yet'}
                      </p>
                    </div>
                  </CardContent>
                </Card>
              </div>
            ) : (
              filteredAgents.map((agent) => {
                const status = getAvailabilityStatus(agent.id)
                const availabilityData = availableAgents.find(a => a.id === agent.id)
                
                return (
                  <Card key={agent.id}>
                    <CardHeader>
                      <div className="flex items-start justify-between">
                        <div className="space-y-1">
                          <CardTitle className="text-lg">
                            {agent.first_name} {agent.last_name}
                          </CardTitle>
                          <CardDescription className="flex items-center gap-2">
                            <Mail className="h-4 w-4" />
                            {agent.email}
                          </CardDescription>
                          {agent.phone && (
                            <CardDescription className="flex items-center gap-2">
                              <Phone className="h-4 w-4" />
                              {agent.phone}
                            </CardDescription>
                          )}
                        </div>
                        {getStatusBadge(status)}
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <div>
                          <p className="text-sm font-medium mb-1">Availability Status</p>
                          <p className="text-sm text-muted-foreground">
                            {status === 'available' 
                              ? `Available for ${selectedDate}`
                              : `Not available for ${selectedDate}`
                            }
                          </p>
                          {availabilityData?.availability?.notes && (
                            <p className="text-xs text-muted-foreground mt-1">
                              Note: {availabilityData.availability.notes}
                            </p>
                          )}
                        </div>

                        <div>
                          <p className="text-sm font-medium mb-1">Account Info</p>
                          <div className="text-xs text-muted-foreground space-y-1">
                            <p>Role: {agent.role}</p>
                            <p>Joined: {new Date(agent.created_at).toLocaleDateString()}</p>
                            <p>Last updated: {new Date(agent.updated_at).toLocaleDateString()}</p>
                          </div>
                        </div>

                        <div className="flex gap-2 pt-2 border-t">
                          <Button size="sm" variant="outline" className="flex-1">
                            View Details
                          </Button>
                          <Button size="sm" variant="outline" className="flex-1">
                            Send Message
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })
            )}
          </div>

          {/* Weekly Calendar View */}
          <Card>
            <CardHeader>
              <CardTitle>Weekly Availability Overview</CardTitle>
              <CardDescription>
                Agent availability for the week of {selectedDate}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8 text-muted-foreground">
                <Calendar className="mx-auto h-12 w-12 mb-4" />
                <p>Weekly calendar view coming soon</p>
                <p className="text-sm">This will show a detailed weekly view of all agent availability</p>
              </div>
            </CardContent>
          </Card>
        </>
      ) : (
        <AgentVerification />
      )}
    </div>
  )
}